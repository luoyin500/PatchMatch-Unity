//
// This is a modified version of the CUDA implementation of PatchMatch algorithm
// implemented by Ryan Yao.
//
// The original source code is available on GitHub.
// https://github.com/rozentill/PatchMatch/blob/master/src/PatchMatch-GPU/PatchMatch-GPU/kernel.cu
//

#pragma kernel PatchMatchCS

#define INT_MAX 2147483647
#define UINT_MAX 0xFFFFFFFFu

Texture2D<float4> _srcImageA;
Texture2D<float4> _srcImageB;
RWStructuredBuffer<uint> _ann;
RWStructuredBuffer<float> _annd;
StructuredBuffer<int> _params;

RWTexture2D<float4> _flowmap;
RWTexture2D<float4> _reconstructedImage;

uint XY_TO_INT(int x, int y)
{
	return ((y) << 12) | (x);
}

int INT_TO_X(uint v)
{
	return (v) & ((1 << 12) - 1);
}

int INT_TO_Y(uint v)
{
	return (v >> 12) & ((1 << 12) - 1);
}

float dist(int a_rows, int a_cols, int b_rows, int b_cols, int ax, int ay, int bx, int by, int patch_w, float cutoff = INT_MAX)
{
	// suppose patch_w is an odd number
	float pixel_sum = 0, pixel_no = 0, pixel_dist=0;
	for (int dy = -patch_w/2; dy <= patch_w/2; dy++)
	{
		for (int dx = -patch_w/2; dx <= patch_w/2; dx++)
		{
			if (
				(ay + dy) < a_rows && (ay + dy) >= 0 && (ax + dx) < a_cols && (ax + dx) >= 0
				&&
				(by + dy) < b_rows && (by + dy) >= 0 && (bx + dx) < b_cols && (bx + dx) >= 0
			   )
			{
				uint2 indexA = uint2(ax+dx, ay+dy);
				uint2 indexB = uint2(bx+dx, by+dy);
				int dr = (_srcImageA[indexA].r - _srcImageB[indexB].r)*255;
				int dg = (_srcImageA[indexA].g - _srcImageB[indexB].g)*255;
				int db = (_srcImageA[indexA].b - _srcImageB[indexB].b)*255;
				pixel_sum += (float)(dr*dr + dg*dg + db*db);
				pixel_no += 1;
			}
		}
	}
	pixel_dist = pixel_sum / pixel_no;
	if (pixel_dist >= cutoff) { return cutoff; }
	else {
		return pixel_dist;
	}
}

void improve_guess(int a_rows, int a_cols, int b_rows, int b_cols, int ax, int ay, inout int xbest, inout int ybest, inout float dbest, int xp, int yp, int patch_w)
{
	float d = 0;
	d = dist(a_rows, a_cols, b_rows, b_cols, ax, ay, xp, yp, patch_w, dbest);

	if (d < dbest)
	{
		xbest = xp;
		ybest = yp;
		dbest = d;
	}
}

float cs_random(float2 uv, int seed)
{
	return frac(sin(dot(uv, float2(12.9898, 78.233)) + seed) * 43758.5453);
}

void InitializeAnn(uint3 id)
{
	// Parameters
	int a_rows = _params[0];
	int a_cols = _params[1];
	int b_rows = _params[2];
	int b_cols = _params[3];
	int patch_w = _params[4];
	int pm_iters = _params[5];
	int rs_max = _params[6];

	// Initialize ann
	int ax = id.x;
	int ay = id.y;
	
	float2 uv = float2((float)ax/a_cols, (float)ay/a_rows);
	int bx = (int)(cs_random(uv,0) * 255);
	int by = (int)(cs_random(uv,1) * 255);

	_ann[ay*a_cols + ax] = XY_TO_INT(bx, by);
	_annd[ay*a_cols + ax] = dist(a_rows, a_cols, b_rows, b_cols, ax, ay, bx, by, patch_w);

	// Visualize initial ann
	uint v = _ann[ay*a_cols + ax];
	int x = INT_TO_X(v);
	int y = INT_TO_Y(v);
	float blue = (float)x / b_cols;
	float green = (float)y / b_rows;
	_flowmap[uint2(ax,ay)] = float4(0, green, blue, 1);
}

[numthreads(8,8,1)]
void PatchMatchCS(uint3 id : SV_DispatchThreadID)
{
	/********************************************/
	/*              Initialization              */
	/********************************************/
	InitializeAnn(id);
	GroupMemoryBarrierWithGroupSync(); // __syncthreads

	/********************************************/
	/*              PatchMatch GPU              */
	/********************************************/
	int ax = id.x;
	int ay = id.y;
	
	// Parameters
	int a_rows = _params[0];
	int a_cols = _params[1];
	int b_rows = _params[2];
	int b_cols = _params[3];
	int patch_w = _params[4];
	int pm_iters = _params[5];
	int rs_max = _params[6];

	if (ax < a_cols && ay < a_rows)
	{
		// For random number generator
		uint seed = (uint)(ay*a_cols + ax);
		float2 uv = float2((float)ax/a_cols, (float)ay/a_rows);

		for (int iter = 0; iter < pm_iters; iter++)
		{
			/* Current (best) guess. */
			uint v = _ann[ay*a_cols + ax];
			int xbest = INT_TO_X(v), ybest = INT_TO_Y(v);
			float dbest = _annd[ay*a_cols + ax];

			/* Propagation: Improve current guess by trying instead correspondences from left, right, up and downs. */
			for (int jump = 8; jump > 0; jump /= 2)
			{
				/* Left */
				if ((ax - jump) < a_cols && (ax - jump) >= 0)
				{
					uint vp = _ann[ay*a_cols + ax - jump]; // the pixel coordinates in image b
					int xp = INT_TO_X(vp) + jump, yp = INT_TO_Y(vp); // the propagated match from vp
					if (xp < b_cols && xp >= 0)
					{
						improve_guess(a_rows, a_cols, b_rows, b_cols, ax, ay, xbest, ybest, dbest, xp, yp, patch_w);
					}
				}
				_ann[ay*a_cols + ax] = XY_TO_INT(xbest, ybest);
				_annd[ay*a_cols + ax] = dbest;

				/* Right */
				if ((ax + jump) < a_cols)
				{
					uint vp = _ann[ay*a_cols + ax + jump]; // the pixel coordinates in image b
					int xp = INT_TO_X(vp) - jump, yp = INT_TO_Y(vp); // the propagated match from vp
					if (xp >= 0 && xp < b_cols)
					{
						improve_guess(a_rows, a_cols, b_rows, b_cols, ax, ay, xbest, ybest, dbest, xp, yp, patch_w);
					}
				}
				_ann[ay*a_cols + ax] = XY_TO_INT(xbest, ybest);
				_annd[ay*a_cols + ax] = dbest;

				/* Up */
				if ((ay - jump) < a_rows && (ay - jump) >=0)
				{
					uint vp = _ann[(ay - jump)*a_cols + ax]; // the pixel coordinates in image b
					int xp = INT_TO_X(vp), yp = INT_TO_Y(vp) + jump; // the propagated match from vp
					if (yp >= 0 && yp < b_rows)
					{
						improve_guess(a_rows, a_cols, b_rows, b_cols, ax, ay, xbest, ybest, dbest, xp, yp, patch_w);
					}
				}
				_ann[ay*a_cols + ax] = XY_TO_INT(xbest, ybest);
				_annd[ay*a_cols + ax] = dbest;

				/* Down */
				if ((ay + jump) < a_rows)
				{
					uint vp = _ann[(ay + jump)*a_cols + ax]; // the pixel coordinates in image b
					int xp = INT_TO_X(vp), yp = INT_TO_Y(vp) - jump; // the propagated match from vp
					if (yp >= 0)
					{
						improve_guess(a_rows, a_cols, b_rows, b_cols, ax, ay, xbest, ybest, dbest, xp, yp, patch_w);
					}
				}
				_ann[ay*a_cols + ax] = XY_TO_INT(xbest, ybest);
				_annd[ay*a_cols + ax] = dbest;

				GroupMemoryBarrierWithGroupSync(); // __syncthreads
			}

			/* Random search: Improve current guess by searching in boxes of exponentially decreasing size around the current best guess. */
			int rs_start = rs_max;
			if (rs_start > max(b_cols, b_rows))
			{
				rs_start = max(b_cols, b_rows);
			}
			for (int mag = rs_start; mag >= 1; mag /= 2)
			{
				/* Sampling window */
				int xmin = max(xbest - mag, 0), xmax = min(xbest + mag + 1, b_cols);
				int ymin = max(ybest - mag, 0), ymax = min(ybest + mag + 1, b_rows);
				int xp = xmin + (int)(cs_random(uv, seed++)*(xmax - xmin)) % (xmax - xmin);
				int yp = ymin + (int)(cs_random(uv, seed++)*(ymax - ymin)) % (ymax - ymin);

				improve_guess(a_rows, a_cols, b_rows, b_cols, ax, ay, xbest, ybest, dbest, xp, yp, patch_w);
			}

			_ann[ay*a_cols + ax] = XY_TO_INT(xbest, ybest);
			_annd[ay*a_cols + ax] = dbest;
			GroupMemoryBarrierWithGroupSync(); // __syncthreads
		}
	}
	/********************************************/
	/*          End of PatchMatch GPU           */
	/********************************************/

	/********************************************/
	/*           Image reconstruction           */
	/********************************************/
	uint v = _ann[ay*a_cols + ax];
	int xbest = INT_TO_X(v);
	int ybest = INT_TO_Y(v);

	float blue = (float)xbest / b_cols;
	float green = (float)ybest / b_rows;

	_flowmap[uint2(ax,ay)] = float4(0, green, blue, 1); // Visualize final ann
	_reconstructedImage[uint2(ax,ay)] = _srcImageB[uint2(xbest,ybest)]; // Reconstruct image
	/********************************************/
	/*        End of image reconstruction       */
	/********************************************/
}